# -*- coding: utf-8 -*-
"""PrimeraEjecucion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LOIQDaZfXTRlbtRGvgi4djivPUrYOORu
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

datos = pd.read_csv('/content/drive/MyDrive/proyecto/high_diamond_ranked_10min.csv')

from sklearn.preprocessing import MinMaxScaler
from sklearn import tree
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

datos2 = datos.copy()

datos2.info()

g = sns.PairGrid(data=datos2, vars=['blueKills', 'blueAssists', 'blueWardsPlaced', 'blueTotalGold'], hue='blueWins', size=3, palette='Set1')
g.map_diag(plt.hist)
g.map_offdiag(plt.scatter)
g.add_legend();

cols = ['gameId', 'redFirstBlood', 'redKills', 'redEliteMonsters', 'redDragons','redTotalMinionsKilled',
       'redTotalJungleMinionsKilled', 'redGoldDiff', 'redExperienceDiff', 'redCSPerMin', 'redGoldPerMin', 'redHeralds',
       'blueGoldDiff', 'blueExperienceDiff', 'blueCSPerMin', 'blueGoldPerMin', 'blueTotalMinionsKilled']
datos2 = datos2.drop(cols, axis = 1)

plt.figure(figsize=(16, 12))
sns.heatmap(datos2.drop('blueWins', axis=1).corr(), cmap='YlGnBu', annot=True, fmt='.2f', vmin=0);

corr_list = datos2[datos2.columns[1:]].apply(lambda x: x.corr(datos2['blueWins']))
cols = []
for col in corr_list.index:
    if (corr_list[col]>0.2 or corr_list[col]<-0.2):
        cols.append(col)
cols

datos2 = datos2[cols]
datos2.head()

datos2.hist(alpha = 0.7, figsize=(12,10), bins=5);

X = datos2
y = datos['blueWins']
scaler = MinMaxScaler()
scaler.fit(X)
X = scaler.transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn import tree
from sklearn.model_selection import GridSearchCV

tree = tree.DecisionTreeClassifier()

grid = {'min_samples_split': [5, 10, 20, 50, 100]},

clf_tree = GridSearchCV(tree, grid, cv=5)
clf_tree.fit(X_train, y_train)

pred_tree = clf_tree.predict(X_test)

acc_tree = accuracy_score(pred_tree, y_test)
print(acc_tree)

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree

pd.get_dummies(data=datos, drop_first=True)

a = datos.drop(columns='blueWins')
b = datos.blueWins

# fit()
modelo = DecisionTreeClassifier(max_depth=5)

modelo.fit(X=a, y=b)
# DecisionTreeClassifier(max_depth=3)

plt.figure(figsize=(80,20))
plot_tree(decision_tree=modelo, feature_names=a.columns, filled=True, fontsize=11);
# print(datos)

pred = modelo.predict(a)
# print(pred.shape)
datos3 = datos.copy()
datos3['prediccion'] = pred
c = (datos3['blueWins'] == datos3['prediccion']).mean()
print(c)

from sklearn.metrics import confusion_matrix

# y_train, y_test

conf = confusion_matrix(datos2['blueWins'], datos2['prediccion'])
print(conf)